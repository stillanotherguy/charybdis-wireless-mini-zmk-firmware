#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <10 6 18 39 30 40 41 19 31 7 9 10 19 20 21 22 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 37>;
            flavor = "balanced";
            require-prior-idle-ms = <130>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <130>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 9 ESC>, <&to 8>;

            // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>, <&to 4>;

            // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 9>;

            // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 6>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        MiddleClick {
            bindings = <&mkp MCLK>;
            key-positions = <28 37>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <16 37>;
        };

        BASE_or_EXTRAS {
            bindings = <&td_bore>;
            key-positions = <38 39>;
        };

        // GameLayer {
        //     bindings = <&tog 4>;
        //     key-positions = <8 9>;
        // };
        // PhotoLayer {
        //     bindings = <&tog 5>;
        //     key-positions = <2 3>;
        // };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define PHOTOS  5
    // #define EXTRAS  6
    // #define MOUSE   7
    // #define SLOW    8
    // #define SCROLL  9

    keymap {
        compatible = "zmk,keymap";

        mac_default_layer {
            bindings = <
  &kp Q  &kp W            &kp E            &kp R                &kp T            &kp Y      &kp U                 &kp I             &kp O             &kp P     
  &kp A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_CONTROL F  &kp G            &kp H      &hmr RIGHT_CONTROL J  &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &kp SEMI  
  &kp Z  &kp X            &kp C            &kp V                &kp B            &kp N      &kp M                 &kp COMMA         &kp DOT           &kp FSLH 
                                &lt 2 ESC        &lt 1 TAB            &kp BACKSPACE    &kp SPACE  &lt 3 ENTER
            >;
        };

        mac_nav_layer {
            bindings = <
  &trans  &kp C_PREV      &kp C_PLAY_PAUSE      &kp C_NEXT             &kp C_VOLUME_UP      &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans        
 &trans  &kp LEFT_ALT    &kp LEFT_GUI          &kp LEFT_CONTROL       &kp C_VOLUME_DOWN    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans        
 &trans  &studio_unlock  &kp RG(LEFT_BRACKET)  &kp RG(RIGHT_BRACKET)  &kp C_MUTE           &kp LG(Z)       &kp LG(X)       &kp LG(C)     &kp LG(V)        &kp LS(LG(Z)) 
                                &trans                &trans                 &trans               &trans          &trans
            >;
        };

        mac_numpad_layer {
            bindings = <
  &trans  &trans    &trans    &trans     &bt BT_PRV    &kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp MINUS  
  &trans  &kp LALT  &kp LGUI  &kp LCTRL  &bt BT_NXT    &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6  &kp PLUS  
  &trans  &trans    &trans    &trans     &bt BT_CLR    &kp N0           &kp N1  &kp N2  &kp N3  &kp EQUAL  
                          &trans    &trans     &trans        &trans           &trans
            >;
        };

        mac_symbol_layer {
            bindings = <
  &kp EXCL  &kp AT  &kp HASH          &kp DLLR           &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  
 &trans    &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans       &trans     &kp RCTRL  &kp RGUI   &kp RALT  &trans    
  &trans    &trans  &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans       &trans     &trans     &trans     &trans    &trans    
                          &trans            &trans             &trans       &trans     &trans
            >;
        };

        mac_function_layer {
            bindings = <
  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans     &trans    &trans    &trans  
  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &kp RCTRL  &kp RGUI  &kp RALT  &trans 
  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans     &trans    &trans    &trans 
                         &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
