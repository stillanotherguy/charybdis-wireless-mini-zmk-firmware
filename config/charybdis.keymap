#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";   
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;            
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <10 6 18 39 30 40 41 19 31 7 9 10 19 20 21 22 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 37>;
            flavor = "balanced";
            require-prior-idle-ms = <130>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <130>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;  // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 9 ESC>, <&to 8>; // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>, <&to 4>; // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 9>;  // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 6>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        MiddleClick {
            bindings = <&mkp MCLK>;
            key-positions = <28 37>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <16 37>;
        };

        BASE_or_EXTRAS {
            bindings = <&td_bore>;
            key-positions = <38 39>;
        };

        // GameLayer {
        //     bindings = <&tog 4>;
        //     key-positions = <8 9>;
        // };

        // PhotoLayer {
        //     bindings = <&tog 5>;
        //     key-positions = <2 3>;
        // };
    };

// ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
//    00     01     02     03    04      05        06     07     08     09     10     11
// ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
//    12     13     14     15    16      17        18     19     20     21     22     23
// ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
//    24     25     26     27    28      29        30     31     32     33     34     35
// ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
//                         36     37     38        39     40
//                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
// #define BASE    0
// #define NUM     1
// #define NAV     2
// #define SYM     3
// #define GAME    4
// #define PHOTOS  5
// #define EXTRAS  6
// #define MOUSE   7
// #define SLOW    8
// #define SCROLL  9

    keymap {
        compatible = "zmk,keymap";
        BASE {
            bindings = <
// ╭────────────────┬──────────────┬─────────────────────────┬─────────────────────────────┬──────────────────┬──────────────────╮  ╭────────────────┬─────────────────┬──────────────────────────────────┬──────────────────────────────┬────────────────────────┬──────────────╮
    &to 0            &kp Q           &kp W                     &kp E                         &kp R              &kp T                 &kp Y             &kp U             &kp I                             &kp O                          &kp P                    &td_layers
// ├────────────────┼──────────────┼─────────────────────────┼─────────────────────────────┼──────────────────┼──────────────────┤  ├────────────────┼─────────────────┼──────────────────────────────────┼──────────────────────────────┼────────────────────────┼──────────────┤
    &hm LCMD TAB     &lt 2 A         &hm LEFT_ALT S            &hm LCTRL D                   &hm LEFT_SHIFT F   &kp G                 &kp H             &hm LEFT_SHIFT J  &hm RCTRL K                       &hm RIGHT_ALT L                &hm LCMD SEMICOLON       &kp DEL
// ├────────────────┼──────────────┼─────────────────────────┼─────────────────────────────┼──────────────────┼──────────────────┤  ├────────────────┼─────────────────┼──────────────────────────────────┼──────────────────────────────┼────────────────────────┼──────────────┤
    &kp C_AC_SEARCH  &kp Z           &hm LC(LA(LEFT_SHIFT)) X  &hm LA(LC(LG(LEFT_SHIFT))) C  &kp V              &kp B                 &kp N             &kp M             &hm LA(LC(LG(LEFT_SHIFT))) COMMA  &hm LC(LA(LEFT_SHIFT)) PERIOD  &kp FSLH                 &kp F12
// ╰────────────────┴──────────────┴─────────────────────────┼─────────────────────────────┼──────────────────┼──────────────────┤  ├────────────────┼─────────────────┼──────────────────────────────────┴──────────────────────────────┴────────────────────────┴──────────────╯
                                                                               &td_cursor    &mkp LCLK          &lt 1 BACKSPACE       &lt 7 RETURN      &lt 3 SPACE
                                                                          // ╰─────────────┴──────────────────┴──────────────────╯  ╰────────────────┴──────────────╯
            >;
        };

        NUM {
            bindings = <
&trans   &none  &none  &none  &none          &none    &kp SLASH  &hm F7 N7  &hm F8 N8  &hm F9 N9  &hm F10 MINUS  &none
&trans   &none  &none  &none  &kp BACKSPACE  &none    &kp ASTRK  &hm F4 N4  &hm F5 N5  &hm F6 N6  &hm F11 PLUS   &trans
&none    &none  &none  &none  &none          &none    &kp DOT    &hm F1 N1  &hm F2 N2  &hm F3 N3  &hm F12 EQUAL  &none
                       &none  &none          &trans   &kp N0     &trans
            >;
        };

        NAV {
            bindings = <
&none   &none   &none   &none   &none   &none     &none    &kp LS(LC(H))   &kp LS(LC(J))  &kp LS(LC(K))  &kp LS(LC(L))    &none
&trans  &trans  &trans  &trans  &trans  &none     &VSplit  &kp LEFT_ARROW  &kp DOWN       &kp UP         &kp RIGHT_ARROW  &none
&none   &none   &none   &none   &none   &none     &HSplit  &kp HOME        &kp PG_DN      &kp PG_UP      &kp END          &none
                        &none   &none   &trans    &trans   &trans
            >;
        };

        SYM {
            bindings = <
&none  &kp PLUS            &kp LEFT_BRACE     &kp RIGHT_BRACE  &kp MINUS             &kp COLON      &kp BSLH   &kp GRAVE             &kp DLLR      &kp CARET        &kp SQT      &none
&none  &hm LCMD EXCL  &hm LEFT_ALT LPAR  &hm LCTRL RPAR   &hm LEFT_SHIFT SPACE  &kp TILDE      &kp SLASH  &hm LEFT_SHIFT SPACE  &hm LCTRL LT  &hm LEFT_ALT GT  &kp HASH     &none
&none  &kp EQUAL           &kp LBKT           &kp RBKT         &kp UNDERSCORE        &kp SEMICOLON  &kp PIPE   &kp ASTRK             &kp AMPS      &kp PRCNT        &kp AT_SIGN  &none
                                              &trans           &trans                &trans         &none      &trans
            >;
        };

        GAME {
            bindings = <
&kp N1  &kp TAB    &kp Q  &kp W   &kp E      &kp R           &none  &none  &none  &none  &none  &none
&kp N2  &kp LCTRL  &kp A  &kp S   &kp D      &kp F           &none  &none  &none  &none  &none  &none
&kp N3  &kp LSHFT  &kp Z  &kp X   &kp C      &kp V           &none  &none  &none  &none  &none  &none
                          &none   &kp SPACE  &kp LEFT_ALT    &none  &none
            >;
        };

        PHOTOS {
            bindings = <
&trans          &kp LA(LC(LS(Z)))  &kp LA(LC(LS(E)))  &kp LA(LC(LS(A)))  &kp LA(LC(LS(S)))  &kp LA(LC(LS(B)))    &none   &none   &none  &none  &none  &none
&kp LC(LA(E))   &kp LEFT           &kp DOWN           &kp UP             &kp RIGHT          &kp LCTRL            &none   &none   &none  &none  &none  &trans
&kp LS(DELETE)  &kp LA(LS(A))      &kp LA(KP_N1)      &kp LA(KP_N2)      &kp LA(KP_N3)      &none                &none   &none   &none  &none  &none  &none
                                                      &trans             &trans             &trans               &trans  &trans
            >;
        };

        EXTRAS {
            bindings = <
&kp C_POWER       &shrug  &lgtm     &gcm      &none  &kp C_BRIGHTNESS_INC    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3  &out OUT_TOG     &bt BT_CLR
&kp C_SLEEP       &shit   &py_iter  &js_iter  &none  &kp C_BRIGHTNESS_DEC    &none         &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_STOP    &kp C_NEXT       &none
&kp C_AL_COFFEE   &none   &none     &none     &none  &clip_hist              &new_dir      &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp PRINTSCREEN  &studio_unlock
                                    &none     &none  &none                   &none         &none
            >;
        };

        MOUSE {
            bindings = <
&none    &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none  &none            &none      &none         &none          &none
&kp TAB  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none  &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LCMD  &none
&none    &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none  &none            &none      &none         &none          &none
                                         &trans          &trans           &trans             &kp RETURN              &trans
            >;
        };

        SLOW {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                              &trans    &trans    &trans    &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                              &trans    &trans    &trans    &trans    &trans
            >;
        };
        mac_default_layer {
            bindings = <
        &kp GRAVE  &kp Q  &kp W            &kp E            &kp R                &kp T            &kp Y      &kp U                 &kp I             &kp O             &kp P     &kp MINUS
        &kp BSLH   &kp A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_CONTROL F  &kp G            &kp H      &hmr RIGHT_CONTROL J  &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &kp SEMI  &kp SQT
        &kp LSHFT  &kp Z  &kp X            &kp C            &kp V                &kp B            &kp N      &kp M                 &kp COMMA         &kp DOT           &kp FSLH  &kp RSHIFT
                                           &lt 2 ESC        &lt 1 TAB            &kp BACKSPACE    &kp SPACE  &lt 3 ENTER           &lt 4 DELETE
                        >;
                };
        
                mac_nav_layer {
                    bindings = <
        &trans  &trans  &kp C_PREV    &kp C_PLAY_PAUSE      &kp C_NEXT             &kp C_VOLUME_UP      &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans         &trans
        &trans  &trans  &kp LEFT_ALT  &kp LEFT_GUI          &kp LEFT_CONTROL       &kp C_VOLUME_DOWN    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans         &trans
        &trans  &trans  &trans        &kp RG(LEFT_BRACKET)  &kp RG(RIGHT_BRACKET)  &kp C_MUTE           &kp LG(Z)       &kp LG(X)       &kp LG(C)     &kp LG(V)        &kp LS(LG(Z))  &trans
                                      &trans                &trans                 &trans               &trans          &trans          &trans
                    >;
                };
        
                mac_numpad_layer {
                    bindings = <
        &bt BT_PRV  &trans  &trans    &trans    &trans     &trans    &kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp MINUS  &kp EQUAL
        &bt BT_NXT  &trans  &kp LALT  &kp LGUI  &kp LCTRL  &trans    &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6  &kp PLUS   &trans
        &bt BT_CLR  &trans  &trans    &trans    &trans     &trans    &kp N0           &kp N1  &kp N2  &kp N3  &kp EQUAL  &trans
                                      &trans    &trans     &trans    &trans           &trans  &trans
                    >;
                };
        
                mac_symbol_layer {
                    bindings = <
        &trans  &kp EXCL  &kp AT  &kp HASH          &kp DLLR           &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp EQUAL
        &trans  &trans    &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans       &trans     &kp RCTRL  &kp RGUI   &kp RALT  &trans    &trans
        &trans  &trans    &trans  &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans       &trans     &trans     &trans     &trans    &trans    &trans
                                  &trans            &trans             &trans       &trans     &trans     &trans
                    >;
                };
        
                mac_function_layer {
                    bindings = <
        &trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans     &trans    &trans    &trans  &trans
        &trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &kp RCTRL  &kp RGUI  &kp RALT  &trans  &trans
        &trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans     &trans    &trans    &trans  &trans
                                 &trans  &trans  &trans    &trans  &trans     &trans
                    >;
                };
        
                default_layer {
                    // -----------------------------------------------------------------------------------------
                    // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
                    // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
                    // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
                    //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
        
                    bindings = <
        &kp GRAVE  &kp Q  &kp W            &kp E                &kp R            &kp T            &kp Y      &kp U             &kp I                 &kp O             &kp P     &kp MINUS
        &kp BSLH   &kp A  &hml LEFT_GUI S  &hml LEFT_CONTROL D  &hml LEFT_ALT F  &kp G            &kp H      &hmr RIGHT_ALT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_GUI L  &kp SEMI  &kp SQT
        &kp LSHFT  &kp Z  &kp X            &kp C                &kp V            &kp B            &kp N      &kp M             &kp COMMA             &kp DOT           &kp FSLH  &kp RSHIFT
                                           &lt 7 ESC            &lt 6 TAB        &kp BACKSPACE    &kp SPACE  &lt 8 ENTER       &lt 9 DELETE
                    >;
                };
        
                nav_layer {
                    bindings = <
        &trans  &trans  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_VOLUME_UP      &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans         &trans
        &trans  &trans  &kp LEFT_GUI  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp C_VOLUME_DOWN    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans         &trans
        &trans  &trans  &trans        &trans            &trans        &kp C_MUTE           &kp LC(Z)       &kp LC(X)       &kp LC(C)     &kp LC(V)        &kp LC(LS(Z))  &trans
                                      &trans            &trans        &trans               &trans          &trans          &trans
                    >;
                };
        
                numpad_layer {
                    bindings = <
        &bt BT_PRV  &trans  &trans        &trans            &trans        &trans    &kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp MINUS  &kp EQUAL
        &bt BT_NXT  &trans  &kp LEFT_GUI  &kp LEFT_CONTROL  &kp LEFT_ALT  &trans    &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6  &kp PLUS   &trans
        &bt BT_CLR  &trans  &trans        &trans            &trans        &trans    &kp N0           &kp N1  &kp N2  &kp N3  &kp EQUAL  &trans
                                          &trans            &trans        &trans    &trans           &trans  &trans
                    >;
                };
        
                symbol_layer {
                    // -----------------------------------------------------------------------------------------
                    // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
                    // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
                    // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
                    //                    | GUI |     | SPC |   | ENT |     | ALT |
        
                    bindings = <
        &trans  &kp EXCL  &kp AT  &kp HASH          &kp DLLR           &kp PRCNT    &kp CARET  &kp AMPS       &kp ASTRK          &kp LPAR       &kp RPAR  &kp EQUAL
        &trans  &trans    &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans       &trans     &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_GUI  &trans    &trans
        &trans  &trans    &trans  &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans       &trans     &trans         &trans             &trans         &trans    &trans
                                  &trans            &trans             &trans       &trans     &trans         &trans
                    >;
                };
        
                function_layer {
                    bindings = <
        &bootloader  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans    &trans     &trans    &trans  &bootloader
        &sys_reset   &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &kp RALT  &kp RCTRL  &kp RGUI  &trans  &sys_reset
        &trans       &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans    &trans     &trans    &trans  &trans
                                      &trans  &trans  &trans    &trans  &trans    &trans
                    >;
                };
            };
    };
};
